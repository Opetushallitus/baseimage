name: Baseimage

on:
  workflow_dispatch:
  schedule:
    - cron: '0 13 * * 1'
  push:
    paths-ignore:
      - '**.md'

env:
  ECR_REPO: 190073735177.dkr.ecr.eu-west-1.amazonaws.com/utility

permissions:
  id-token: write   # This is required for requesting the JWT
  contents: write    # This is required for actions/checkout read/write

jobs:

  update-packages:
    if: ${{ github.event_name == 'schedule' }}
    runs-on: ubuntu-latest
    continue-on-error: true
    strategy:
      fail-fast: true
      matrix:
        jdk: [8, 11, 17]
        servicekind: [fatjar, war]
        tomcat: [tomcat7, tomcat8]
        exclude:
          - jdk: 17
            servicekind: war
          - servicekind: fatjar
            tomcat: tomcat8
    env:
      PILVIKEHITYS_SLACK_TOKEN: ${{ secrets.PILVIKEHITYS_SLACK_TOKEN }}
    steps:
      - name: Set up variables
        shell: bash
        run: |
          echo "IMAGE_LABEL=ga-${GITHUB_RUN_NUMBER}" >> $GITHUB_ENV
          echo "BUILD_TIME=$(date --iso-8601=seconds)" >> $GITHUB_ENV
          if [ "${{ matrix.tomcat }}" = "tomcat8" ]
          then
            echo "FOLDER=${{ matrix.servicekind }}-${{ matrix.tomcat }}-openjdk${{ matrix.jdk }}" >> $GITHUB_ENV
          else
            echo "FOLDER=${{ matrix.servicekind }}-openjdk${{ matrix.jdk }}" >> $GITHUB_ENV
          fi
      - uses: actions/checkout@v3
      - name: Build image and check packages
        shell: bash
        continue-on-error: true
        run: |
          docker build --build-arg SERVICE_KIND=${{ matrix.servicekind }} --build-arg OPENJDK_VERSION=${{ matrix.jdk }} --build-arg TOMCAT_VERSION=${{ matrix.tomcat }} --build-arg FOLDER=${{ env.FOLDER }} -t test-alpine .
          docker run -u root -v $(pwd)/variants/${{ env.FOLDER }}:/repository test-alpine /bin/sh -c "apk info -v | sort > /repository/package-versions && chmod 755 /repository/package-versions"
          ALPINE=$(git diff --shortstat $(pwd)/variants/${{ env.FOLDER }}/package-versions)

          docker build --build-arg SERVICE_KIND=${{ matrix.servicekind }} --build-arg OPENJDK_VERSION=${{ matrix.jdk }} --build-arg TOMCAT_VERSION=${{ matrix.tomcat }} --build-arg FOLDER=${{ env.FOLDER }}-corretto -t test-azlinux2 -f Dockerfile.corretto .
          docker run -u root -v $(pwd)/variants/${{ env.FOLDER }}-corretto:/repository test-azlinux2 /bin/sh -c "rpm -qa | sort > /repository/package-versions && chmod 755 /repository/package-versions"
          AZ2=$(git diff --shortstat $(pwd)/variants/${{ env.FOLDER }}-corretto/package-versions)

          if [ -n "$ALPINE" ] || [ -n "$AZ2" ]; then
            echo "Updating packages"
            git config --global user.name "Github Actions"
            git config --global user.email "github-actions@opintopolku.fi"
            git commit -a -m 'Update baseimage packages' || true
            git push origin "HEAD:${GITHUB_REF_NAME}"
            curl -H "Content-Type: application/json" -X POST \
              --data "{\"text\": \"Baseimage: packages updated by Github Actions\"}" \
              ${PILVIKEHITYS_SLACK_TOKEN} 
          else
            echo "No update needed"
          fi
    
  build:
    if: ${{ github.event_name != 'schedule' }}
    runs-on: ubuntu-latest
    continue-on-error: true
    strategy:
      fail-fast: true
      matrix:
        jdk: [8, 11, 17]
        servicekind: [fatjar, war]
        tomcat: [tomcat7, tomcat8]
        exclude:
          - jdk: 17
            servicekind: war
          - servicekind: fatjar
            tomcat: tomcat8

    steps:
      - uses: actions/checkout@v3

      - name: Set up variables
        shell: bash
        run: |
          echo "IMAGE_LABEL=ga-${GITHUB_RUN_NUMBER}" >> $GITHUB_ENV
          echo "BUILD_TIME=$(date --iso-8601=seconds)" >> $GITHUB_ENV
          if [ "${{ matrix.tomcat }}" = "tomcat8" ]
          then
            echo "FOLDER=${{ matrix.servicekind }}-${{ matrix.tomcat }}-openjdk${{ matrix.jdk }}" >> $GITHUB_ENV
          else
            echo "FOLDER=${{ matrix.servicekind }}-openjdk${{ matrix.jdk }}" >> $GITHUB_ENV
          fi

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          role-session-name: baseimage-deploy
          aws-region: eu-west-1

      - name: Get ECR Registry
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v1

      - name: Docker meta for alpine images
        id: meta-alpine
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ env.ECR_REPO }}/baseimage-${{ env.FOLDER }}
          tags: |
            type=raw,value=${{ env.IMAGE_LABEL }}
            type=raw,value=${{ github.ref_name }}
          labels: |
            BaseimageType=${{ matrix.servicekind }}-openjdk${{ matrix.jdk }}
            BaseimageBuildNumber=${{ env.IMAGE_LABEL }}
            BaseimageBuildTime=${{ env.BUILD_TIME }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Setup buildx
        uses: docker/setup-buildx-action@v2
        id: buildx
      
      - name: Login to ECR
        uses: docker/login-action@v2
        with:
          registry: ${{ steps.ecr-login.outputs.registry }}

      - name: Build and export to Docker
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          platforms: linux/amd64
          tags: ${{ steps.meta-alpine.outputs.tags }}
          labels: ${{ steps.meta-alpine.outputs.labels }}
          build-args: |
            SERVICE_KIND=${{ matrix.servicekind }}
            OPENJDK_VERSION=${{ matrix.jdk }}
            TOMCAT_VERSION=${{ matrix.tomcat }}
            FOLDER=${{ env.FOLDER }}
      
      - name: Update build metadata
        shell: bash
        run: |
          aws dynamodb put-item --table-name builds --item "{\"Service\": {\"S\": \"$FOLDER\"}, \"Build\": {\"S\": \"$IMAGE_LABEL\"}, \"Branch\": {\"S\": \"$github.ref_name\"}, \"Commit\": {\"S\": \"$github.sha\"}, \"Time\": {\"S\": \"$BUILD_TIME\"}}" --condition-expression "attribute_not_exists(Id)" --region eu-west-1

      - name: Docker meta for corretto images
        id: meta-corretto
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ env.ECR_REPO }}/baseimage-${{ env.FOLDER }}-corretto
          tags: |
            type=raw,value=${{ env.IMAGE_LABEL }}
            type=raw,value=${{ github.ref_name }}
          labels: |
            BaseimageType=${{ matrix.servicekind }}-openjdk${{ matrix.jdk }}
            BaseimageBuildNumber=${{ env.IMAGE_LABEL }}
            BaseimageBuildTime=${{ env.BUILD_TIME }}

      - name: Build and export to Docker
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile.corretto
          push: true
          platforms: linux/amd64, linux/arm64
          tags: ${{ steps.meta-corretto.outputs.tags }}
          labels: ${{ steps.meta-corretto.outputs.labels }}
          build-args: |
            SERVICE_KIND=${{ matrix.servicekind }}
            OPENJDK_VERSION=${{ matrix.jdk }}
            TOMCAT_VERSION=${{ matrix.tomcat }}
            FOLDER=${{ env.FOLDER }}-corretto
      
      - name: Update build metadata
        shell: bash
        run: |
          aws dynamodb put-item --table-name builds --item "{\"Service\": {\"S\": \"$FOLDER-corretto\"}, \"Build\": {\"S\": \"$IMAGE_LABEL\"}, \"Branch\": {\"S\": \"$github.ref_name\"}, \"Commit\": {\"S\": \"$github.sha\"}, \"Time\": {\"S\": \"$BUILD_TIME\"}}" --condition-expression "attribute_not_exists(Id)" --region eu-west-1
